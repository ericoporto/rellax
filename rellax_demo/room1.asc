// room script file
#define DIAMOND_COUNT 18

Character* diamond[];

managed struct charExtra {
  int isJumpingCounter;
  int coolDown;
  bool on_air;
};

charExtra* ce[];

int prevx,  prevy;
int frame_count;

void do_gravity(Character * chara){
  if(ce[chara.ID].isJumpingCounter>0){
    ce[chara.ID].isJumpingCounter=ce[chara.ID].isJumpingCounter-8;
    chara.y=chara.y-8;
    int frame = chara.Frame;
    ce[chara.ID].on_air = true;
    if(frame >= Game.GetFrameCountForLoop(VCHARJUMP,  chara.Loop)-1){
      frame=0;
    } else {
      if(frame_count%3==0){
        frame++;
      }
    }
    chara.LockViewFrame(VCHARJUMP, chara.Loop, frame, eKeepMoving); 

  } else {
    if(GetWalkableAreaAtRoom(chara.x, chara.y+4)!=0){
      chara.y=chara.y+4;
    } else if(GetWalkableAreaAtRoom(chara.x, chara.y+2)!=0){
      chara.y=chara.y+2;
    } else  if(GetWalkableAreaAtRoom(chara.x, chara.y+1)!=0){
      chara.y=chara.y+1;
    } else {
      // hit a platform or ground
        if(ce[chara.ID].coolDown>0){
          ce[chara.ID].coolDown=0;  
        }
      if(ce[chara.ID].on_air){
        chara.UnlockView(eKeepMoving);
        ce[chara.ID].on_air = false;  
      }

    }
  }
}

bool was_moving;
void is_left_right_pressed(Character * chara){
  bool moved=false;
  int loop = chara.Loop;
  int frame = chara.Frame;
  
  if(IsKeyPressed(eKeyD) || IsKeyPressed(eKeyRightArrow) ){
    loop = 2;
    if(GetWalkableAreaAtRoom(chara.x+4, chara.y-2)!=0){
      chara.x=chara.x+4;
      moved=true;
    } else if(GetWalkableAreaAtRoom(chara.x+2, chara.y-2)!=0){
      chara.x=chara.x+2;
      moved=true;
    } else  if(GetWalkableAreaAtRoom(chara.x+1, chara.y-2)!=0){
      chara.x=chara.x+1;
      moved=true;
    }
  } else if(IsKeyPressed(eKeyA) || IsKeyPressed(eKeyLeftArrow)){
    loop = 1;
    if(GetWalkableAreaAtRoom(chara.x-4, chara.y-2)!=0){
      chara.x=chara.x-4;
      moved=true;
    } else if(GetWalkableAreaAtRoom(chara.x-2, chara.y-2)!=0){
      chara.x=chara.x-2;
      moved=true;
    } else  if(GetWalkableAreaAtRoom(chara.x-1, chara.y-2)!=0){
      chara.x=chara.x-1;
      moved=true;
    }
  } 
  
  if(was_moving){
    was_moving = false;
    
    chara.UnlockView();
  }
  
  was_moving = moved;
  
  if(moved){
    if(frame >= Game.GetFrameCountForLoop(VCHARWALK, loop)-1){
      frame=1;
    } else {
      if(frame_count%3==0){
        frame++;
      }
    }
    chara.LockViewFrame(VCHARWALK, loop, frame, eKeepMoving); 
  }
}

function on_key_press(eKeyCode keycode) {
  if(keycode == eKeyW || keycode == eKeyUpArrow){
    if(ce[player.ID].isJumpingCounter<=0 && ce[player.ID].coolDown <=0){
      ce[player.ID].isJumpingCounter = 56;
      ce[player.ID].coolDown=40;
    }
  }
}

void repeatedly_execute_always() {
  frame_count++;
  
  for(int i=0 ; i<Game.CharacterCount ; i++){
    if(ce[i].coolDown>0){
      ce[i].coolDown=ce[i].coolDown-1;  
    }
    
    if(player.Room == character[i].Room){
      Character * pcha = character[i];
      do_gravity(pcha);
    }
  }
  
  
  for(int i=0 ; i<DIAMOND_COUNT ; i++){
    if(diamond[i].IsCollidingWithChar(player)){
      GiveScore(1);
      diamond[i].x = -48;
      diamond[i].y = -48;
    }
  }
  
  is_left_right_pressed(player);
}

function region1_Standing()
{
  player.ChangeRoom(1, 282, 250);
}

function room_Load()
{
  diamond = new Character[DIAMOND_COUNT];
  diamond[0] = cDiamond001;
  diamond[1] = cDiamond002;
  diamond[2] = cDiamond003;
  diamond[3] = cDiamond004;
  diamond[4] = cDiamond005;
  diamond[5] = cDiamond006;
  diamond[6] = cDiamond007;
  diamond[7] = cDiamond008;
  diamond[8] = cDiamond009;
  diamond[9] = cDiamond010;
  diamond[10] = cDiamond011;
  diamond[11] = cDiamond012;
  diamond[12] = cDiamond013;
  diamond[13] = cDiamond014;
  diamond[14] = cDiamond015;
  diamond[15] = cDiamond016;
  diamond[16] = cDiamond017;
  diamond[17] = cDiamond018;
  
  
  ce = new charExtra[Game.CharacterCount];
  for(int i=0 ; i<Game.CharacterCount ; i++){
    ce[i] = new charExtra;
  }
}

function obj_bigBlueCup_AnyClick()
{
  if(Rellax.CameraOffsetY == 0){
    Rellax.CameraOffsetY = -64;
    obj_bigBlueCup.Graphic = 2042;
  } else {
    Rellax.CameraOffsetY = 0;
    obj_bigBlueCup.Graphic = 2041;
  }
}
